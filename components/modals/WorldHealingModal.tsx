/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
import React, { useState, useCallback, useEffect, useRef } from 'react';
import { Modal } from '../ui/Modal';
import type { WorldHealingReport } from '../../types';
import './WorldHealingModal.css';

interface WorldHealingModalProps {
    onClose: () => void;
    onTriggerWorldHealing: (onProgressUpdate: (message: string) => void) => Promise<WorldHealingReport | null>;
}

export const WorldHealingModal = ({ onClose, onTriggerWorldHealing }: WorldHealingModalProps) => {
    const [status, setStatus] = useState<'idle' | 'processing' | 'complete'>('idle');
    const [report, setReport] = useState<WorldHealingReport | null>(null);
    const [processingStep, setProcessingStep] = useState('ƒêang kh·ªüi t·∫°o...');
    const [elapsedTime, setElapsedTime] = useState(0);
    const timerRef = useRef<number | null>(null);

    useEffect(() => {
        if (status === 'processing') {
            setElapsedTime(0);
            timerRef.current = window.setInterval(() => {
                setElapsedTime(prev => prev + 1);
            }, 1000);
        } else {
            if (timerRef.current) {
                clearInterval(timerRef.current);
                timerRef.current = null;
            }
        }
        return () => {
            if (timerRef.current) clearInterval(timerRef.current);
        };
    }, [status]);


    const handleStart = useCallback(async () => {
        setStatus('processing');
        setReport(null);
        
        const updateProgress = (message: string) => {
            setProcessingStep(message);
        };

        try {
            const resultReport = await onTriggerWorldHealing(updateProgress);
            if (resultReport) {
                setReport(resultReport);
            }
        } catch (error) {
            console.error("World healing trigger failed in modal:", error);
        } finally {
            setStatus('complete');
        }
    }, [onTriggerWorldHealing]);

    const formatTime = (seconds: number) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    };

    const renderContent = () => {
        switch (status) {
            case 'idle':
                return (
                    <div className="world-healing-state-container">
                        <div className="healing-icon">ü©∫</div>
                        <p className="healing-description">
                            H·ªá th·ªëng s·∫Ω th·ª±c hi·ªán m·ªôt cu·ªôc "ki·ªÉm tra s·ª©c kh·ªèe" to√†n di·ªán cho th·∫ø gi·ªõi game c·ªßa b·∫°n. N√≥ s·∫Ω r√† so√°t d·ªØ li·ªáu, t√¨m ki·∫øm c√°c m√¢u thu·∫´n logic, c√°c th√¥ng tin thi·∫øu s√≥t, v√† t·ª± ƒë·ªông s·ª≠a ch·ªØa ch√∫ng ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n (kh√¥ng t·ªën API call).
                        </p>
                        <p className="field-hint">V√≠ d·ª•: s·ª≠a c√°c m·ªëi quan h·ªá m·ªôt chi·ªÅu, th√™m tr·∫°ng th√°i "ƒë√£ ch·∫øt" cho nh√¢n v·∫≠t ƒë∆∞·ª£c m√¥ t·∫£ l√† ƒë√£ qua ƒë·ªùi trong truy·ªán, v.v.</p>
                    </div>
                );
            case 'processing':
                return (
                    <div className="world-healing-state-container">
                        <div className="spinner spinner-lg"></div>
                        <div className="processing-details">
                            <p className="healing-step">{processingStep}</p>
                            <p className="healing-timer">{formatTime(elapsedTime)}</p>
                        </div>
                    </div>
                );
            case 'complete':
                return (
                    <div className="world-healing-report-container">
                        {report ? (
                            <>
                                <div className="report-summary">
                                    <h4>‚úÖ ƒê·ªìng b·ªô Ho√†n t·∫•t</h4>
                                    <p>{report.summary}</p>
                                </div>
                                <div className="report-details-grid">
                                    <div className="report-section">
                                        <h5 className="report-title">V·∫•n ƒë·ªÅ ƒë∆∞·ª£c Ph√°t hi·ªán</h5>
                                        {report.problems_found.length > 0 ? (
                                            <ul className="report-list">
                                                {report.problems_found.map((problem, index) => (
                                                    <li key={index} className="report-item problem">{problem}</li>
                                                ))}
                                            </ul>
                                        ) : <p className="no-issues-found">Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ n√†o.</p>}
                                    </div>
                                    <div className="report-section">
                                        <h5 className="report-title">H√†nh ƒë·ªông ƒë√£ Th·ª±c hi·ªán</h5>
                                        {report.actions_taken.length > 0 ? (
                                            <ul className="report-list">
                                                {report.actions_taken.map((action, index) => (
                                                    <li key={index} className="report-item action">{action}</li>
                                                ))}
                                            </ul>
                                        ) : <p className="no-issues-found">Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.</p>}
                                    </div>
                                </div>
                            </>
                        ) : (
                             <div className="world-healing-state-container">
                                <p className="healing-description error">
                                    ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒë·ªìng b·ªô. Vui l√≤ng th·ª≠ l·∫°i.
                                </p>
                            </div>
                        )}
                    </div>
                );
        }
    };

    const renderFooter = () => {
        switch (status) {
            case 'idle':
                return (
                    <>
                        <button className="lore-button cancel" onClick={onClose}>H·ªßy</button>
                        <button className="lore-button save-apply" onClick={handleStart}>B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch & S·ª≠a l·ªói</button>
                    </>
                );
            case 'processing':
                return <p className="field-hint">Vui l√≤ng ch·ªù...</p>;
            case 'complete':
                return <button className="lore-button save-apply" onClick={onClose}>ƒê√£ hi·ªÉu</button>;
        }
    };
    
    return (
        // FIX: Moved content inside Modal to provide 'children' prop.
        <Modal
            onClose={onClose}
            header={<h3>ƒê·ªìng b·ªô & S·ª≠a l·ªói Th·∫ø gi·ªõi (AI)</h3>}
            footer={renderFooter()}
            className="world-healing-modal"
        >
            {renderContent()}
        </Modal>
    );
};
